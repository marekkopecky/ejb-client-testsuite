<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.wildfly</groupId>
        <artifactId>ejb-client-testsuite-parent</artifactId>
        <version>1.0.0.Final-SNAPSHOT</version>
    </parent>


    <groupId>org.jboss</groupId>
    <artifactId>ejb-client-testsuite-basic</artifactId>
    <name>EJB Client Testsuite: Basic</name>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <properties>

        <!-- "user" means auth using a password, "local" means local auth -->
        <server.home>${project.basedir}/../snapshots/target/wildfly/build/target/wildfly-EJB-CLIENT-TESTSUITE</server.home>
        <authentication.type>user</authentication.type>
        <byteman.args>
            -javaagent:${org.jboss.byteman:byteman:jar}=script:${project.basedir}/byteman/bytemanscript.btm,prop:org.jboss.byteman.transform.all=true,sys:${org.jboss.byteman:byteman:jar},boot:${org.jboss.byteman:byteman:jar}
        </byteman.args>
        <surefireplugin.jacoco.args/>
        <security.manager.client.args/>
        <!-- This value will become "-secmgr" if security.manager.server profile is active.
            Otherwise, we need to provide at least a dummy something, because this value
            can't be empty -->
        <security.manager.server.args>-Ddummy=dummy</security.manager.server.args>
        <server.startup.timeout>120</server.startup.timeout>
        <server.jvm.jpms.args>--add-exports=java.desktop/sun.awt=ALL-UNNAMED --add-exports=java.naming/com.sun.jndi.ldap=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.lang.invoke=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.base/java.security=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.util.concurrent=ALL-UNNAMED --add-opens=java.management/javax.management=ALL-UNNAMED --add-opens=java.naming/javax.naming=ALL-UNNAMED</server.jvm.jpms.args>
        <client.jvm.jpms.args>--add-exports=java.desktop/sun.awt=ALL-UNNAMED --add-exports=java.naming/com.sun.jndi.ldap=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.lang.invoke=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.base/java.security=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.util.concurrent=ALL-UNNAMED --add-opens=java.management/javax.management=ALL-UNNAMED --add-opens=java.naming/javax.naming=ALL-UNNAMED --add-exports=jdk.naming.dns/com.sun.jndi.dns=ALL-UNNAMED --add-opens=java.base/java.net=ALL-UNNAMED</client.jvm.jpms.args>
        <server.jvm.args></server.jvm.args>

        <jboss.config.file>standalone-full.xml</jboss.config.file>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>${groupId.ee.bom}</groupId>
                <artifactId>${artifactId.ee.bom}</artifactId>
                <version>${version.ee.bom}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.jboss.arquillian</groupId>
                <artifactId>arquillian-bom</artifactId>
                <version>${version.arquillian}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.jboss.arquillian.jakarta</groupId>
                <artifactId>arquillian-jakarta-bom</artifactId>
                <version>${version.arquillian.jakarta}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.jboss.shrinkwrap</groupId>
                <artifactId>shrinkwrap-bom</artifactId>
                <version>${version.shrinkwrap}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>${groupId.ejb.client.bom}</groupId>
            <artifactId>${artifactId.ejb.client.bom}</artifactId>
            <type>pom</type>
        </dependency>

        <dependency>
            <groupId>org.jboss.ejb3</groupId>
            <artifactId>jboss-ejb3-ext-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.threads</groupId>
            <artifactId>jboss-threads</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.wildfly.common</groupId>
            <artifactId>wildfly-common</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.shrinkwrap.resolver</groupId>
            <artifactId>shrinkwrap-resolver-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.shrinkwrap.resolver</groupId>
            <artifactId>shrinkwrap-resolver-spi</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.shrinkwrap.resolver</groupId>
            <artifactId>shrinkwrap-resolver-api-maven</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.shrinkwrap.resolver</groupId>
            <artifactId>shrinkwrap-resolver-spi-maven</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.shrinkwrap.resolver</groupId>
            <artifactId>shrinkwrap-resolver-impl-maven</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.shrinkwrap.resolver</groupId>
            <artifactId>shrinkwrap-resolver-impl-maven-archive</artifactId><!-- Check https://issues.jboss.org/browse/SHRINKRES-238 first if start seeing any problem here -->
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.platform</groupId>
            <artifactId>jakarta.jakartaee-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.junit</groupId>
            <artifactId>arquillian-junit-container</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.protocol</groupId>
            <artifactId>arquillian-protocol-servlet-jakarta</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.shrinkwrap</groupId>
            <artifactId>shrinkwrap-impl-base</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.wildfly.arquillian</groupId>
            <artifactId>wildfly-arquillian-container-managed</artifactId>
            <scope>test</scope>
            <exclusions>     <!-- we want to use xnio from EJB client bom -->
                <exclusion>
                    <artifactId>xnio-api</artifactId>
                    <groupId>org.jboss.xnio</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>xnio-nio</artifactId>
                    <groupId>org.jboss.xnio</groupId>
                </exclusion>
                <exclusion>
                    <groupId>org.wildfly.arquillian</groupId>
                    <artifactId>wildfly-arquillian-protocol-jmx</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.wildfly.core</groupId>
            <artifactId>wildfly-controller</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>ch.qos.reload4j</groupId>
            <artifactId>reload4j</artifactId>
        </dependency>
        <dependency>
            <groupId>xom</groupId>
            <artifactId>xom</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.byteman</groupId>
            <artifactId>byteman</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.wildfly.security</groupId>
            <artifactId>wildfly-elytron</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.wildfly.security</groupId>
            <artifactId>wildfly-elytron-auth-server-deprecated</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.wildfly.security</groupId>
            <artifactId>wildfly-elytron-realm</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>

        <plugins>
            <plugin>
                <groupId>org.wildfly.plugins</groupId>
                <artifactId>wildfly-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>configure-server</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>start</goal>
                            <goal>execute-commands</goal>
                            <goal>shutdown</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <jbossHome>${server.home}</jbossHome>
                    <server-config>${jboss.config.file}</server-config>
                    <startupTimeout>${server.startup.timeout}</startupTimeout>
                    <scripts>
                        <script>${project.basedir}/setup/configure-self-remote-outbound-connection-elytron.cli</script>
                        <script>${project.basedir}/setup/configure-logging.cli</script>
                        <script>${project.basedir}/setup/prepare-jms-destinations.cli</script>
                        <script>${project.basedir}/setup/setup-elytron.cli</script>
                        <script>${project.basedir}/setup/prepare-http-invoker-elytron.cli</script>
                        <script>${project.basedir}/setup/prepare-https-connector-elytron.cli</script>
                        <script>${project.basedir}/setup/prepare-remoting-connector-elytron.cli</script>
                        <script>${project.basedir}/setup/prepare-remoting-ssl-connector-elytron.cli</script>
                        <script>${project.basedir}/setup/allow-all-remote-connectors-ejb.cli</script>
                    </scripts>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>properties</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                    <systemPropertyVariables>
                        <server.home>${server.home}</server.home>
                        <javax.net.ssl.trustStore>${project.basedir}/files/ssl/client.keystore
                        </javax.net.ssl.trustStore>
                        <javax.net.ssl.keyStore>${project.basedir}/files/ssl/client.keystore
                        </javax.net.ssl.keyStore>
                        <javax.net.ssl.trustStorePassword>abcdef</javax.net.ssl.trustStorePassword>
                        <javax.net.ssl.keyStorePassword>abcdef</javax.net.ssl.keyStorePassword>
                        <authentication.type>${authentication.type}</authentication.type>
                        <server.jvm.args>${server.jvm.args} ${server.jvm.jpms.args}</server.jvm.args>
                        <groupId.ejb.client.bom>${groupId.ejb.client.bom}</groupId.ejb.client.bom>
                        <artifactId.ejb.client.bom>${artifactId.ejb.client.bom}</artifactId.ejb.client.bom>
                        <version.ejb.client.bom>${version.ejb.client.bom}</version.ejb.client.bom>
                        <arquillian.launch>${arquillian.launch}</arquillian.launch>
                        <jboss.config.file>${jboss.config.file}</jboss.config.file>
                        <security.manager.server.args>${security.manager.server.args}</security.manager.server.args>
                        <sun.java.command>${sun.java.command}</sun.java.command>
                    </systemPropertyVariables>
                    <argLine>    <!-- byteman needs to hook into boot-classloader's classes because we exploit java.util.zip.Deflater in CompressionTestCase! -->
                        ${byteman.args} ${surefireplugin.jacoco.args} ${security.manager.client.args} ${client.jvm.jpms.args} -Dlauncher.skip.jpms.properties=true
                    </argLine>
                    <includes>
                        <include>**/*TestCase*.java</include>
                    </includes>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-files-to-server</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <echo message="Copying necessary file to server distribution"/>
                                <copy file="${project.basedir}/files/ssl/server.keystore"
                                      overwrite="true"
                                      verbose="true"
                                      tofile="${server.home}/standalone/configuration/server.keystore"/>
                                <copy todir="${server.home}/standalone/configuration/" verbose="true"
                                      overwrite="true">
                                    <fileset dir="${project.basedir}/files/user"/>
                                </copy>
                                <copy todir="${server.home}/modules/" verbose="true" overwrite="true">
                                    <fileset dir="${project.basedir}/target/modules"/>
                                    <fileset dir="${project.basedir}/files/modules"/>
                                </copy>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- create the EJB JAR for the 'my-awesome-ejb-module' module -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <id>create-my-awesome-ejb-module</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <phase>generate-test-resources</phase>
                    </execution>
                    <execution>
                        <id>default-jar</id>
                        <phase>none</phase>
                    </execution>
                </executions>
                <configuration>
                    <outputDirectory>${project.basedir}/target/modules/my-awesome-ejb-module/main
                    </outputDirectory>
                    <includes>
                        <include>ejbjar/*</include>
                    </includes>
                    <finalName>ejbmodule</finalName>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <configuration>
                    <filesets>
                        <fileset>
                            <directory>${project.basedir}/target/modules/my-awesome-ejb-module/main</directory>
                            <includes>
                                <include>**/*.jar</include>
                            </includes>
                            <followSymlinks>false</followSymlinks>
                        </fileset>
                    </filesets>
                </configuration>
            </plugin>

        </plugins>
    </build>

    <profiles>
        <profile>
            <id>default</id>
            <properties>
                <connector>http-remoting</connector>
                <context.type>wildfly-naming-client</context.type>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>default-testCompile</id>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>no-basic-module-only</id>
            <activation>
                <property>
                    <name>!specificModule</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>remoting--wildfly-naming-client</id>
                                <goals>
                                    <goal>test</goal>
                                </goals>
                                <configuration>
                                    <skip>false</skip>
                                    <systemPropertyVariables>
                                        <connector>remoting</connector>
                                        <context.type>wildfly-naming-client</context.type>
                                    </systemPropertyVariables>
                                </configuration>
                            </execution>
                            <execution>
                                <id>remoting--global</id>
                                <goals>
                                    <goal>test</goal>
                                </goals>
                                <configuration>
                                    <skip>false</skip>
                                    <systemPropertyVariables>
                                        <connector>remoting</connector>
                                        <context.type>global</context.type>
                                    </systemPropertyVariables>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- tests are skipped in default execution of surefire, because by default 2 specific executions are run (see "no-basic-module-only" profile) -->
        <!-- this profile allows to run tests default execution -->
        <profile>
            <id>basic-module-only</id>
            <activation>
                <property>
                    <name>specificModule</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <skip>false</skip>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>debugServer</id>
            <properties>
                <server.jvm.args>-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y</server.jvm.args>
            </properties>
        </profile>

        <profile>
            <id>skipTestCompile</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>default-testCompile</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- enable security manager on the client side (active by default) -->
        <profile>
            <id>security-manager-client</id>
            <activation>
                <!--<activeByDefault>true</activeByDefault>-->
                <!-- activeByDefault doesn't work for some reason - in that case the property
                     overridings in this profile don't take effect.. so let's use a bit of a hack -->
                <file><missing>THIS_FILE_WILL_NEVER_EXIST</missing></file>
            </activation>
            <properties>
                <security.manager.client.args>-Djava.security.manager
                    -Djava.security.policy=${project.build.testOutputDirectory}/permit.policy
                    -Djava.security.debug=failure</security.manager.client.args>
            </properties>
        </profile>

        <!-- Enable the Security Manager on the server side -->
        <profile>
            <id>security-manager-server</id>
            <properties>
                <security.manager.server.args>-secmgr</security.manager.server.args>
            </properties>
        </profile>

        <profile>
            <id>jacoco</id>
            <properties>
                <!-- make a jacoco agent gather exec data on server side - this is passed to server in arquillian.xml -->
                <server.jvm.args>-javaagent:${project.basedir}/jacoco/jacocoagent.jar=destfile=${project.build.directory}/jacoco-server.exec</server.jvm.args>
                <!-- make a jacoco agent gather exec data on client side - this is an argument of surefire plugin -->
                <surefireplugin.jacoco.args>-javaagent:${project.basedir}/jacoco/jacocoagent.jar=destfile=${project.build.directory}/jacoco-client.exec</surefireplugin.jacoco.args>
                <!-- ensure that the report will be generated even if there were some failing tests -->
                <maven.test.failure.ignore>true</maven.test.failure.ignore>
            </properties>
            <build>
                <plugins>
                    <!-- generate HTML report after the TS -->
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>generate-jacoco-html-report</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <taskdef resource="net/sf/antcontrib/antcontrib.properties"
                                                 classpathref="maven.plugin.classpath"/>
                                        <ant antfile="${project.basedir}/build.xml">
                                            <target name="report"/>
                                        </ant>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>ant-contrib</groupId>
                                <artifactId>ant-contrib</artifactId>
                                <exclusions>
                                    <exclusion>
                                        <groupId>ant</groupId>
                                        <artifactId>ant</artifactId>
                                    </exclusion>
                                </exclusions>
                            </dependency>
                        </dependencies>
                    </plugin>
                    <plugin>
                        <groupId>org.jacoco</groupId>
                        <artifactId>jacoco-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>merge-jacoco-reports</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>merge</goal>
                                </goals>
                                <configuration>
                                    <fileSets>
                                        <fileSet>
                                            <directory>${project.build.directory}</directory>
                                            <includes>
                                                <include>jacoco-client.exec</include>
                                                <include>jacoco-server.exec</include>
                                            </includes>
                                        </fileSet>
                                    </fileSets>
                                    <destFile>${project.basedir}/target/jacoco-merged.exec</destFile>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
